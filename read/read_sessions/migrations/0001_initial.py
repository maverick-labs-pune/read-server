#  Copyright (c) 2020. Maverick Labs
#    This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU Affero General Public License as,
#   published by the Free Software Foundation, either version 3 of the
#   License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Generated by Django 2.1.5 on 2019-05-02 05:08

from django.db import migrations, models
import django.db.models.deletion
import read_sessions.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
        ('ngos', '0001_initial'),
        ('classrooms', '0001_initial'),
        ('books', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReadSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(default=read_sessions.models.generate_session_key, max_length=7, unique=True)),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('type', models.CharField(choices=[('READ_SESSION_REGULAR', 'Regular'), ('READ_SESSION_EVALUATION', 'Evaluation')], max_length=30)),
                ('is_evaluated', models.BooleanField(default=False)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('notes', models.CharField(blank=True, max_length=500, null=True)),
                ('start_time', models.TimeField(blank=True)),
                ('end_time', models.TimeField(blank=True)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'read_sessions',
            },
        ),
        migrations.CreateModel(
            name='ReadSessionBookFairy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_time', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'read_session_book_fairies',
            },
        ),
        migrations.CreateModel(
            name='ReadSessionClassroom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_time', models.DateTimeField(auto_now=True)),
                ('classroom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='classrooms.Classroom')),
                ('read_session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='read_sessions.ReadSession')),
            ],
            options={
                'db_table': 'read_session_classrooms',
            },
        ),
        migrations.CreateModel(
            name='ReadSessionFeedbackBook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_time', models.DateTimeField(auto_now=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='books.Book')),
                ('inventory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='books.Inventory')),
                ('read_session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='read_sessions.ReadSession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='students.Student')),
            ],
            options={
                'db_table': 'read_session_feedback_books',
            },
        ),
        migrations.CreateModel(
            name='StudentEvaluations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance', models.BooleanField(default=False)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_time', models.DateTimeField(auto_now=True)),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='ngos.Level')),
                ('read_session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='read_sessions.ReadSession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='students.Student')),
            ],
            options={
                'db_table': 'student_evaluations',
            },
        ),
        migrations.CreateModel(
            name='StudentFeedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance', models.BooleanField(default=False)),
                ('comments', models.CharField(blank=True, max_length=500, null=True)),
                ('creation_time', models.DateTimeField(auto_now_add=True)),
                ('last_modification_time', models.DateTimeField(auto_now=True)),
                ('level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='ngos.Level')),
                ('read_session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='read_sessions.ReadSession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='students.Student')),
            ],
            options={
                'db_table': 'student_feedback',
            },
        ),
    ]
